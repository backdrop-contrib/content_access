<?php

/**
 * @file
 * Content access install file.
 */

/**
 * Implements hook_install().
 */
function content_access_install() {
  $node_types = node_type_get_types();
  $config = config('content_access.settings');
  foreach ($node_types as $type) {
    $config->set('content_access_' . $type->type, array());
  }
  $config->save();
}

/**
 * Implements hook_disable().
 */
function content_access_disable() {
  content_access_disabling(TRUE);
}

/**
 * Implements hook_schema().
 */
function content_access_schema() {
  $schema['content_access'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
      ),
    ),
    'primary key' => array('nid'),
  );
  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function content_access_update_last_removed() {
  return 7101;
}

/**
 * Implements hook_update_N().
 */
function content_access_update_1000() {
  $config = config('content_access.settings');
  $config->set('content_access_article', update_variable_get('content_access_article'));
  $config->set('content_access_page', update_variable_get('content_access_page'));
  $config->save();

  // Delete variables.
  update_variable_del('content_access_article');
  update_variable_del('content_access_page');
}

/**
 * Implements hook_update_N().
 *
 * Enable notice to rebuild node access permissions since a new node access realm
 * was added to respect the core "view own unpublished content" permission.
 */
function content_access_update_1001() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Run role name update on per node permissions, if needed.
 */
function content_access_update_2000() {
  $result = db_query('SELECT * FROM {content_access}');

  foreach ($result as $per_node_setting) {
    $changed = 0;
    $setting_array = json_decode($per_node_setting->settings, TRUE);
    $nid = $per_node_setting->nid;
    foreach ($setting_array as $access_permission => $access_settings) {
      foreach ($access_settings as $key => $user_role) {
        if ($user_role === 1) {
          $setting_array[$access_permission][$key] = 'anonymous';
          $changed = 1;
        }
        else if ($user_role == 2) {
          $setting_array[$access_permission][$key] = 'authenticated';
          $changed = 1;
        }
      }
    }
    if ($changed) {
      db_update('content_access')
        ->fields(array(
          'settings' => serialize($setting_array),
        ))
        ->condition('nid', $nid, '=')
        ->execute();
    }
  }
}
