<?php

/**
 * @file
 * Content access install file.
 */

/**
 * Implements hook_install().
 */
function content_access_install() {
  $node_types = node_type_get_types();
  $config = config('content_access.settings');
  foreach ($node_types as $type) {
    $config->set('content_access_' . $type->type, array());
  }
  $config->save();
}

/**
 * Implements hook_disable().
 */
function content_access_disable() {
  content_access_disabling(TRUE);
}

/**
 * Implements hook_schema().
 */
function content_access_schema() {
  $schema['content_access'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
      ),
    ),
    'primary key' => array('nid'),
  );
  $schema['content_access_node_access_rebuild'] = array(
    'description' => 'Store node access permissions which are waiting to be rebuilt.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of when the permission change was requested.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'nid' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'uid' => array('uid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
function content_access_update_last_removed() {

  // Fix a potential error in the schema version from an earlier release.
  $schema_version = backdrop_get_installed_schema_version('content_access');
  if ($schema_version == 2000) {
    backdrop_set_installed_schema_version('content_access', 1002);
  }
  elseif ($schema_version == 2001) {
    backdrop_set_installed_schema_version('content_access', 1003);
  }

  return 7104;
}

/**
 * Implements hook_update_N().
 */
function content_access_update_1000() {
  $config = config('content_access.settings');
  $config->set('silent_rebuild', update_variable_get('content_access_silent_rebuild', TRUE));
  $config->save();

  // Delete variables.
  update_variable_del('content_access_silent_rebuild');
}

/**
 * Implements hook_update_N().
 *
 * Enable notice to rebuild node access permissions since a new node access
 * realm was added to respect the core "view own unpublished content"
 * permission.
 */
function content_access_update_1001() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Run role name update on per node permissions, if needed.
 */
function content_access_update_1002() {
  $result = db_query('SELECT * FROM {content_access}');

  foreach ($result as $per_node_setting) {
    $changed = 0;
    $setting_array = unserialize($per_node_setting->settings);
    $nid = $per_node_setting->nid;
    foreach ($setting_array as $access_permission => $access_settings) {
      foreach ($access_settings as $key => $user_role) {
        if ($user_role === 1) {
          $setting_array[$access_permission][$key] = 'anonymous';
          $changed = 1;
        }
        else if ($user_role == 2) {
          $setting_array[$access_permission][$key] = 'authenticated';
          $changed = 1;
        }
      }
    }
    if ($changed) {
      db_update('content_access')
        ->fields(array(
          'settings' => serialize($setting_array),
        ))
        ->condition('nid', $nid, '=')
        ->execute();
    }
  }
}

/**
 * Convert settings from serialize to json_encode.
 */
function content_access_update_1003() {
  $settings = db_query('SELECT nid, settings FROM {content_access}');
  $tested = FALSE;
  foreach ($settings as $setting) {
    if (!$tested) {
      $json_test = json_decode($setting->settings);
      if (json_last_error() === JSON_ERROR_NONE) {
        // It appears these settings have already been converted to JSON.
        break;
      }
      $tested = TRUE;
    }
    $setting_array = unserialize($setting->settings);
    db_update('content_access')
      ->fields(array(
        'settings' => json_encode($setting_array),
      ))
      ->condition('nid', $setting->nid, '=')
      ->execute();
  }
}

/**
 * Add a new table to handle pending rebuild permissions tasks. Clean up config.
 */
function content_access_update_1004() {
  if (!db_table_exists('content_access_node_access_rebuild')) {
    $schema = content_access_schema();
    db_create_table('content_access_node_access_rebuild', $schema['content_access_node_access_rebuild']);
  }
  $config = config('content_access.settings');
  // Ensure a value for silent_rebuild is set.
  $silent_rebuild = $config->get('silent_rebuild');
  if ($silent_rebuild == NULL) {
    $config->set('silent_rebuild', TRUE);
  }
  // Remove unused config values.
  $config->clear('content_access_article');
  $config->clear('content_access_page');
  $config->save();
}

/**
 * Enable notice to rebuild node access permissions since a new node access
 * realm was added to respect the core "view any unpublished content"
 * permission.
 */
function content_access_update_1005() {
  node_access_needs_rebuild(TRUE);
}
