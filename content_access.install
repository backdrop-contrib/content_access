<?php

/**
 * @file
 * Content access install file.
 */

/**
 * Implements hook_uninstall().
 */
function content_access_uninstall() {
  foreach (node_type_get_types() as $type_name => $type) {
    variable_del('content_access_' . $type_name);
  }
}

/**
 * Implements hook_schema().
 */
function content_access_schema() {
  $schema['content_access'] = array(
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0
      ),
      'settings' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium'
      ),
    ),
    'primary key' => array('nid')
  );
  $schema['content_access_node_access_rebuild'] = array(
    'description' => 'Store node access permissions which are waiting to be rebuilt.',
    'fields' => array(
      'nid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'timestamp' => array(
        'description' => 'The Unix timestamp of when the permission change was requested.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'foreign keys' => array(
      'nid' => array(
        'table' => 'node',
        'columns' => array('nid' => 'nid'),
      ),
      'uid' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
    'indexes' => array(
      'nid' => array('nid'),
      'uid' => array('uid'),
    ),
  );

  return $schema;
}

/**
 * Convert content type settings to a new features-friendly storage format.
 */
function content_access_update_7101() {
  $settings = variable_get('content_access_settings', array());
  $settings_new = array();
  foreach ($settings as $setting => $data) {
    foreach ($data as $type_name => $value) {
      $settings_new[$type_name][$setting] = $value;
    }
  }
  foreach ($settings_new as $type_name => $data) {
    variable_set('content_access_' . $type_name, $data);
  }
  variable_del('content_access_settings');
}

/**
 * Enable notice to rebuild node access permissions since a new node access realm
 * was added to respect the core "view own unpublished content" permission
 */
function content_access_update_7102() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Convert settings from serialize to json_encode.
 */
function content_access_update_7103() {
  $settings = db_query('SELECT nid, settings FROM {content_access}');
  foreach ($settings as $setting) {
    $setting_array = unserialize($setting->settings);
    db_update('content_access')
      ->fields(array(
        'settings' => json_encode($setting_array),
      ))
      ->condition('nid', $setting->nid, '=')
      ->execute();
  }
}

/**
 * Add a new table to handle pending rebuild permissions tasks.
 */
function content_access_update_7104() {
  $schema = content_access_schema();
  db_create_table('content_access_node_access_rebuild', $schema['content_access_node_access_rebuild']);
}
